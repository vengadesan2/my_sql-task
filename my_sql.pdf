SQL Lesson 1: SELECT queries 101:
1 )SELECT(title) FROM movies;
2) SELECT(Director) FROM movies;
3) SELECT title, director FROM movies;
4) SELECT title,year FROM movies;
5) SELECT * FROM movies;
SQL Lesson 2: Queries with constraints (Pt. 1)
1)SELECT title FROM movies where id=6;
2)SELECT title,year FROM movies where year>2000 or year2010 ;
3)SELECT title, year FROM movies
WHERE year < 2000 OR year > 2010;
4)SELECT title, year FROM movies
WHERE year <= 2003;
SQL Lesson 3: Queries with constraints (Pt. 2)
1)SELECT title, director FROM movies
WHERE title LIKE "Toy Story%";
2)SELECT title, director FROM movies
WHERE director LIkE "john Lasseter%";
3)SELECT title, director FROM movies
WHERE director != "john Lasseter";
4)SELECT * FROM movies
WHERE title LIKE "WALL-%";
SQL Lesson 4: Filtering and sorting Query results
1)SELECT DISTINCT director FROM movies order by
asc;
2)SELECT title FROM movies ORDER BY title asc LIMIT5;
3)SELECT title,year FROM movies ORDER BY year desc
LIMIT5;
4)SELECT title,year FROM movies order by title asc
limit 4 offset 4 ;
SQL Review: Simple SELECT Queries
1)SELECT city, population FROM north_american_cities
WHERE country = "Canada";
2)SELECT city, latitude FROM north_american_cities
WHERE country = "United States"
ORDER BY latitude DESC;
3)SELECT city, longitude FROM north_american_cities
WHERE longitude < -87.629798
ORDER BY longitude ASC;
4)SELECT city, population FROM north_american_cities
WHERE country LIKE "Mexico"
ORDER BY population DESC
LIMIT 2;
5)SELECT city, population FROM north_american_cities
WHERE country LIKE "United States"
ORDER BY population DESC
LIMIT 2 OFFSET 2;
SQL Lesson 6: Multi-table queries with JOINs
`
1)SELECT title, domestic_sales, international_sales
FROM movies
JOIN boxoffice
ON movies.id = boxoffice.movie_id;
2)SELECT title, domestic_sales, international_sales
FROM movies
JOIN boxoffice
ON movies.id = boxoffice.movie_id
WHERE international_sales > domestic_sales;
3)SELECT title, rating
FROM movies
JOIN boxoffice
ON movies.id = boxoffice.movie_id
ORDER BY rating DESC;
SQL Lesson 7: OUTER JOINs
1)SELECT DISTINCT building FROM employees;
2)SELECT * FROM buildings;
3)SELECT DISTINCT building_name, role
FROM buildings
LEFT JOIN employees
ON building_name = building;
SQL Lesson 8: A short note on NULLs
1)SELECT name, role FROM employees
WHERE building IS NULL;
2)SELECT DISTINCT building_name
FROM buildings
LEFT JOIN employees
ON building_name = building
WHERE role IS NULL;
SQL Lesson 9: Queries with expressions
1)SELECT title, (domestic_sales + international_sales)
/ 1000000 AS gross_sales_millions
FROM movies
JOIN boxoffice
ON movies.id = boxoffice.movie_id;
2)SELECT title, rating * 10 as rating_percent
FROM movies
JOIN boxoffice
ON movies.id = boxoffice.movie_id;
3)SELECT title, year
FROM movies
WHERE year % 2 = 0;
SQL Lesson 10: Queries with aggregates (Pt. 1)
1)SELECT max( Years_employed) FROM employees;
2)SELECT role, AVG(years_employed) as
Average_years_employed
FROM employees
GROUP BY role;
SQL Lesson 11: Queries with aggregates (Pt. 2)
1)SELECT role, COUNT(*) as Number_of_artists
FROM employees
WHERE role = "Artist";
2)SELECT role, COUNT(*) as Number_of_artists
FROM employees
group by role;
3)SELECT role, SUM(years_employed)
FROM employees
GROUP BY role
HAVING role = "Engineer";
SQL Lesson 12: Order of execution of a Query
1)SELECT director,count(director) as couut
FROM movies GROUP BY director;
2)SELECT director, SUM(domestic_sales +
international_sales) as
Cumulative_sales_from_all_movies
FROM movies
INNER JOIN boxoffice
ON movies.id = boxoffice.movie_id
GROUP BY director;
SQL Lesson 13: Inserting rows
1)INSERT INTO movies VALUES (4, "Toy Story 4", "El
Directore", 2015, 90);
2)INSERT INTO movies VALUES (4, "Toy Story 4", "El
Directore", 2015, 90);
3)INSERT INTO boxoffice VALUES (4, 8.7, 340000000,
270000000);
SQL Lesson 14: Updating rows
1)UPDATE movies
SET director = "John Lasseter"
WHERE id = 2;
2)UPDATE movies
SET year = 1999
WHERE id = 3;
3)UPDATE movies
SET title = "Toy Story 3", director = "Lee Unkrich"
WHERE id = 11;